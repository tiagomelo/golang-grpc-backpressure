// Copyright (c) 2023 Tiago Melo. All rights reserved.
// Use of this source code is governed by the MIT License that can be found in
// the LICENSE file.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: stockservice.proto

package stockservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StockService_GetUpdates_FullMethodName = "/stockservice.StockService/GetUpdates"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	// Server-streaming RPC for sending stock updates to clients.
	GetUpdates(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (StockService_GetUpdatesClient, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetUpdates(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (StockService_GetUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[0], StockService_GetUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceGetUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockService_GetUpdatesClient interface {
	Recv() (*StockUpdate, error)
	grpc.ClientStream
}

type stockServiceGetUpdatesClient struct {
	grpc.ClientStream
}

func (x *stockServiceGetUpdatesClient) Recv() (*StockUpdate, error) {
	m := new(StockUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	// Server-streaming RPC for sending stock updates to clients.
	GetUpdates(*EmptyRequest, StockService_GetUpdatesServer) error
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) GetUpdates(*EmptyRequest, StockService_GetUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_GetUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServiceServer).GetUpdates(m, &stockServiceGetUpdatesServer{stream})
}

type StockService_GetUpdatesServer interface {
	Send(*StockUpdate) error
	grpc.ServerStream
}

type stockServiceGetUpdatesServer struct {
	grpc.ServerStream
}

func (x *stockServiceGetUpdatesServer) Send(m *StockUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stockservice.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdates",
			Handler:       _StockService_GetUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stockservice.proto",
}
